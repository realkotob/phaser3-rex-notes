/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,8,9,16,20,21,26,27],$V1=[1,17],$V2=[1,18],$V3=[1,23],$V4=[1,24],$V5=[2,24],$V6=[8,9],$V7=[8,9,17,25],$V8=[1,31],$V9=[1,36],$Va=[1,40],$Vb=[19,29],$Vc=[6,8,16,20,21,26,27],$Vd=[2,13],$Ve=[1,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"document":3,"init":4,"statements":5,"EOF":6,"line_end":7,"EOL":8,";":9,"blank_line":10,"statement":11,"defaults_statement":12,"node_statement":13,"edge_statement":14,"opt_semicolon":15,"NODE":16,"[":17,"attribute_list":18,"]":19,"EDGE":20,"IDENT":21,"edge_chain":22,"edge_attribute_opt":23,"node_ref":24,"->":25,"QUOTED_STRING":26,"STAR":27,"attribute":28,",":29,"=":30,"attribute_value":31,"NUMBER":32,"HEXNUMBER":33,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"EOL",9:";",16:"NODE",17:"[",19:"]",20:"EDGE",21:"IDENT",25:"->",26:"QUOTED_STRING",27:"STAR",29:",",30:"=",32:"NUMBER",33:"HEXNUMBER"},
productions_: [0,[3,3],[4,0],[7,1],[7,1],[10,1],[5,0],[5,2],[5,2],[11,1],[11,1],[11,1],[11,1],[15,0],[15,1],[12,5],[12,5],[13,5],[13,2],[14,3],[22,3],[22,3],[23,0],[23,3],[24,1],[24,1],[24,1],[18,1],[18,3],[28,3],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {
          nodes: getNodesArray(),
          edges: edges
        };
      
break;
case 2:
 resetState(); 
break;
case 15:
 mergeInto(currentDefaults.node, $$[$0-2]); 
break;
case 16:
 mergeInto(currentDefaults.edge, $$[$0-2]); 
break;
case 17:
 ensureNode($$[$0-4], $$[$0-2]); 
break;
case 18:
 ensureNode($$[$0-1], {}); 
break;
case 19:

        var chainParams = $$[$0-1] || null;
        var effectiveEdgeParamsForChain = merged(currentDefaults.edge, chainParams);
        for (var i = 0; i < $$[$0-2].edgePairs.length; i += 1) {
          var pair = $$[$0-2].edgePairs[i];
          addEdge(pair.sourceId, pair.targetId, effectiveEdgeParamsForChain);
        }
      
break;
case 20:

        ensureNode($$[$0-2].id, $$[$0-2].parameters);
        ensureNode($$[$0].id, $$[$0].parameters);
        this.$ = {
          lastNodeId: $$[$0].id,
          edgePairs: [{ sourceId: $$[$0-2].id, targetId: $$[$0].id }]
        };
      
break;
case 21:

        ensureNode($$[$0].id, $$[$0].parameters);
        $$[$0-2].edgePairs.push({ sourceId: $$[$0-2].lastNodeId, targetId: $$[$0].id });
        this.$ = { lastNodeId: $$[$0].id, edgePairs: $$[$0-2].edgePairs };
      
break;
case 22:
 this.$ = null; 
break;
case 23:
 this.$ = $$[$0-1]; 
break;
case 24:
 this.$ = { id: $$[$0], parameters: {} }; 
break;
case 25:
 this.$ = { id: unquote(yytext), parameters: {} }; 
break;
case 26:
        
        var gen = createAnonymousDummyNode();
        this.$ = { id: gen, parameters: { $dummy: true } };
      
break;
case 27:
 var parametersObject = {}; parametersObject[$$[$0].key] = $$[$0].value; this.$ = parametersObject; 
break;
case 28:
 $$[$0-2][$$[$0].key] = $$[$0].value; this.$ = $$[$0-2]; 
break;
case 29:
 this.$ = { key: $$[$0-2], value: $$[$0] }; 
break;
case 30:
 this.$ = Number(yytext); 
break;
case 31:
 this.$ = parseInt(yytext, 16); 
break;
case 32:
 this.$ = unquote(yytext); 
break;
case 33:
 this.$ = yytext; 
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,6],{5:3}),{6:[1,4],8:[1,7],9:[1,11],10:5,11:6,12:8,13:9,14:10,16:[1,12],20:[1,13],21:[1,14],22:15,24:16,26:$V1,27:$V2},{1:[2,1]},o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,5]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),{17:[1,19]},{17:[1,20]},{7:22,8:$V3,9:$V4,17:[1,21],25:$V5},o($V6,[2,22],{23:25,17:[1,27],25:[1,26]}),{25:[1,28]},o($V7,[2,25]),o($V7,[2,26]),{18:29,21:$V8,28:30},{18:32,21:$V8,28:30},{18:33,21:$V8,28:30},o($V0,[2,18]),o($V0,[2,3]),o($V0,[2,4]),{7:34,8:$V3,9:$V4},{21:$V9,24:35,26:$V1,27:$V2},{18:37,21:$V8,28:30},{21:$V9,24:38,26:$V1,27:$V2},{19:[1,39],29:$Va},o($Vb,[2,27]),{30:[1,41]},{19:[1,42],29:$Va},{19:[1,43],29:$Va},o($V0,[2,19]),o($V7,[2,21]),o($V7,$V5),{19:[1,44],29:$Va},o($V7,[2,20]),o($Vc,$Vd,{15:45,9:$Ve}),{21:$V8,28:47},{21:[1,52],26:[1,51],31:48,32:[1,49],33:[1,50]},o($Vc,$Vd,{15:53,9:$Ve}),{7:54,8:$V3,9:$V4},o($V6,[2,23]),o($V0,[2,15]),o($V0,[2,14]),o($Vb,[2,28]),o($Vb,[2,29]),o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),o($Vb,[2,33]),o($V0,[2,16]),o($V0,[2,17])],
defaultActions: {4:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  // ----- module-scope state -----
  var nodesMap, edges, dummyAutoId, edgeAutoId, currentDefaults;
  // --- switches & indices ---
  var allowParallelEdges;               // default true
  var edgeKeyToIndexMap;                // (sourceId,targetId) -> edges[] index

  function resetState() {
    nodesMap = Object.create(null);
    edges = [];
    dummyAutoId = 0;   // for anonymous dummy nodes: _d1, _d2, ...
    edgeAutoId  = 0;   // for edges: _e1, _e2, ...
    currentDefaults = {
      node: {},   // defaults applied when a *non-dummy* node is first created
      edge: {}    // defaults applied to each edge at creation (chain-tail can override)
    };
    allowParallelEdges = false;
    edgeKeyToIndexMap = Object.create(null);
  }

  function shallowCopy(obj) {
    var out = {};
    for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) out[k] = obj[k];
    return out;
  }
  function mergeInto(target, src) {
    if (!src) return target;
    for (var k in src) if (Object.prototype.hasOwnProperty.call(src, k)) target[k] = src[k];
    return target;
  }
  function merged(a, b) {
    return mergeInto(mergeInto({}, a || {}), b || {});
  }

  function makeEdgeKey(sourceId, targetId) {
    return sourceId + '->' + targetId;
  }
  var dedupePolicy = "first-wins";

  /**
   * Ensure a node exists.
   * - If creating a **dummy** (newParameters && newParameters.$dummy === true):
   *     DO NOT seed with NODE defaults; start from {} and only set $dummy flag (+ any explicit fields).
   * - Else (normal node first creation): seed with NODE defaults, then merge explicit params.
   */
  function ensureNode(nodeId, newParameters) {
    var isDummyCreation = !!(newParameters && newParameters.$dummy === true);
    var nodeItem = nodesMap[nodeId];
    if (!nodeItem) {
      // seed parameters: {} for dummy, NODE defaults for normal nodes
      var seed = isDummyCreation ? {} : shallowCopy(currentDefaults.node);
      nodeItem = { id: nodeId, parameters: seed };
      nodesMap[nodeId] = nodeItem;
    }
    if (newParameters && typeof newParameters === 'object') {
      // merge caller-provided parameters; dummy=true will be set/kept
      mergeInto(nodeItem.parameters, newParameters);
    }
    return nodeItem;
  }

  /** Create a fresh anonymous dummy node id like _d1, and register it as dummy (no NODE defaults). */
  function createAnonymousDummyNode() {
    dummyAutoId += 1;
    var dummyNodeId = "_d" + String(dummyAutoId);
    ensureNode(dummyNodeId, { $dummy: true });
    return dummyNodeId;
  }

  /** Create a fresh edge id like _e1. */
  function createEdgeId() {
    edgeAutoId += 1;
    return "_e" + String(edgeAutoId);
  }

  /**
   * Push an edge with a generated id and merged parameters:
   * effectiveEdgeParams = merge(currentDefaults.edge, edgeParameters)
   */
  var dedupePolicy = "first-wins";
  function addEdge(sourceId, targetId, edgeParameters) {
    var key = makeEdgeKey(sourceId, targetId);

    if (!allowParallelEdges) {
      var existIdx = edgeKeyToIndexMap[key];
      if (existIdx != null) {
        if (dedupePolicy === 'last-wins') {
          edges[existIdx].parameters = merged(currentDefaults.edge, edgeParameters || {});
        }
        return;
      }
    }

    var effective = merged(currentDefaults.edge, edgeParameters || {});
    edges.push({
      id: createEdgeId(),
      sourceId: sourceId,
      targetId: targetId,
      parameters: effective
    });

    edgeKeyToIndexMap[key] = edges.length - 1;
  }

  function getNodesArray() {
    var out = [];
    for (var id in nodesMap) {
      if (Object.prototype.hasOwnProperty.call(nodesMap, id)) {
        out.push(nodesMap[id]);
      }
    }
    return out;
  }

  function unquote(text) { return text.slice(1, -1); }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip horizontal whitespace only */
break;
case 1:return 8
break;
case 2:/* skip line comments starting with # */
break;
case 3:return 16     /* defaults for nodes (UPPERCASE) */
break;
case 4:return 20     /* defaults for edges (UPPERCASE) */
break;
case 5:return 25
break;
case 6:return 17
break;
case 7:return 19
break;
case 8:return 29
break;
case 9:return 30
break;
case 10:return 9
break;
case 11:return 27
break;
case 12:return 33
break;
case 13:return 32         /* integer/float */
break;
case 14:return 26
break;
case 15:return 21          /* bare identifiers */
break;
case 16:return 6
break;
case 17:return 'INVALID'
break;
}
},
rules: [/^(?:[ \t\f]+)/,/^(?:\r\n|\r|\n)/,/^(?:#.*)/,/^(?:NODE\b)/,/^(?:EDGE\b)/,/^(?:->)/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:=)/,/^(?:;)/,/^(?:\*)/,/^(?:\b0x[0-9A-Fa-f]+\b)/,/^(?:-?[0-9]+(\.[0-9]+)?\b)/,/^(?:"(\\.|[^\"\\])*"|'(\\.|[^\'\\])*')/,/^(?:[A-Za-z_][A-Za-z0-9_-]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
}